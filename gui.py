import tkinter as tk
from tkinter import messagebox, Frame, Label, Button, Canvas, Scale
from game_logic import GameState
import random
from sound_manager import sound_manager


class MillionaireGame:
    def __init__(self, root):
        self.root = root
        self.root.title("–ö—Ç–æ —Ö–æ—á–µ—Ç —Å—Ç–∞—Ç—å –º–∏–ª–ª–∏–æ–Ω–µ—Ä–æ–º?")
        self.root.geometry("1000x700")
        self.root.resizable(False, False)
        self.root.configure(bg="#2c3e50")

        # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
        self.colors = {
            'bg': '#2c3e50',
            'primary': '#3498db',
            'secondary': '#2ecc71',
            'accent': '#e74c3c',
            'text': '#ecf0f1',
            'button': '#2980b9',
            'button_hover': '#1f618d',
            'prize_bg': '#34495e',
            'current_prize': '#f39c12',
            'disabled': '#7f8c8d'
        }

        self.game_state = None
        self.main_menu()

    def create_button(self, parent, text, command, **kwargs):
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é kwargs –∏ —É–¥–∞–ª—è–µ–º font, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        button_kwargs = kwargs.copy()
        if 'font' in button_kwargs:
            del button_kwargs['font']

        btn = Button(parent, text=text, command=command,
                     font=("Arial", 12), bg=self.colors['button'],
                     fg=self.colors['text'], relief=tk.RAISED, bd=3,
                     activebackground=self.colors['button_hover'],
                     activeforeground=self.colors['text'],
                     **button_kwargs)
        btn.bind("<Enter>", lambda e: e.widget.config(bg=self.colors['button_hover']))
        btn.bind("<Leave>", lambda e: e.widget.config(bg=self.colors['button']))
        return btn

    def create_custom_font_button(self, parent, text, command, font=("Arial", 12), **kwargs):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º"""
        btn = Button(parent, text=text, command=command,
                     font=font, bg=self.colors['button'],
                     fg=self.colors['text'], relief=tk.RAISED, bd=3,
                     activebackground=self.colors['button_hover'],
                     activeforeground=self.colors['text'],
                     **kwargs)
        btn.bind("<Enter>", lambda e: e.widget.config(bg=self.colors['button_hover']))
        btn.bind("<Leave>", lambda e: e.widget.config(bg=self.colors['button']))
        return btn

    def main_menu(self):
        self.clear_window()

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∑–≤—É–∫–∏ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        sound_manager.stop_all()

        # –§–æ–Ω –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        canvas = Canvas(self.root, bg=self.colors['bg'], highlightthickness=0)
        canvas.pack(fill=tk.BOTH, expand=True)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = Label(canvas, text="–ö—Ç–æ —Ö–æ—á–µ—Ç —Å—Ç–∞—Ç—å –º–∏–ª–ª–∏–æ–Ω–µ—Ä–æ–º?",
                            font=("Arial", 28, "bold"), bg=self.colors['bg'],
                            fg=self.colors['text'])
        title_label.place(relx=0.5, rely=0.3, anchor=tk.CENTER)

        # –ö–Ω–æ–ø–∫–∏
        button_frame = Frame(canvas, bg=self.colors['bg'])
        button_frame.place(relx=0.5, rely=0.5, anchor=tk.CENTER)

        self.create_button(button_frame, "üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", self.start_game,
                           width=20, height=2).pack(pady=10)
        self.create_button(button_frame, "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–≤—É–∫–∞", self.settings_menu,
                           width=20, height=2).pack(pady=10)
        self.create_button(button_frame, "‚ùå –í—ã—Ö–æ–¥", self.root.quit,
                           width=20, height=2).pack(pady=10)

    def settings_menu(self):
        self.clear_window()

        canvas = Canvas(self.root, bg=self.colors['bg'], highlightthickness=0)
        canvas.pack(fill=tk.BOTH, expand=True)

        Label(canvas, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–≤—É–∫–∞",
              font=("Arial", 24, "bold"), bg=self.colors['bg'],
              fg=self.colors['text']).place(relx=0.5, rely=0.2, anchor=tk.CENTER)

        # –§—Ä–µ–π–º –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
        settings_frame = Frame(canvas, bg=self.colors['bg'])
        settings_frame.place(relx=0.5, rely=0.4, anchor=tk.CENTER)

        # –°–ª–∞–π–¥–µ—Ä –≥—Ä–æ–º–∫–æ—Å—Ç–∏
        Label(settings_frame, text="–ì—Ä–æ–º–∫–æ—Å—Ç—å:",
              font=("Arial", 14), bg=self.colors['bg'],
              fg=self.colors['text']).pack(pady=10)

        volume_scale = Scale(settings_frame, from_=0, to=100, orient=tk.HORIZONTAL,
                             length=300, bg=self.colors['bg'], fg=self.colors['text'],
                             troughcolor=self.colors['primary'],
                             command=self.change_volume)
        volume_scale.set(int(sound_manager.volume * 100))
        volume_scale.pack(pady=10)

        # –ö–Ω–æ–ø–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–≤—É–∫–æ–≤
        test_frame = Frame(settings_frame, bg=self.colors['bg'])
        test_frame.pack(pady=20)

        Label(test_frame, text="–¢–µ—Å—Ç –∑–≤—É–∫–æ–≤:",
              font=("Arial", 12), bg=self.colors['bg'],
              fg=self.colors['text']).pack(pady=5)

        test_buttons_frame = Frame(test_frame, bg=self.colors['bg'])
        test_buttons_frame.pack()

        self.create_button(test_buttons_frame, "üîä –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π",
                           lambda: sound_manager.play_correct(), width=15).pack(side=tk.LEFT, padx=5)
        self.create_button(test_buttons_frame, "üîä –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π",
                           lambda: sound_manager.play_wrong(), width=15).pack(side=tk.LEFT, padx=5)
        self.create_button(test_buttons_frame, "üîä –ü–æ–¥—Å–∫–∞–∑–∫–∞",
                           lambda: sound_manager.play_hint(), width=15).pack(side=tk.LEFT, padx=5)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–≤—É–∫–æ–≤—ã—Ö —Ñ–∞–π–ª–∞—Ö
        info_frame = Frame(settings_frame, bg=self.colors['bg'])
        info_frame.pack(pady=20)

        info_text = """–î–ª—è —Ä–∞–±–æ—Ç—ã –∑–≤—É–∫–æ–≤ –ø–æ–º–µ—Å—Ç–∏—Ç–µ –≤ –ø–∞–ø–∫—É 'sounds':
‚Ä¢ correct.mp3 - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
‚Ä¢ wrong.mp3 - –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç  
‚Ä¢ hint.mp3 - –ø–æ–¥—Å–∫–∞–∑–∫–∞
‚Ä¢ final_answer.mp3 - —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
‚Ä¢ win.mp3 - –ø–æ–±–µ–¥–∞"""

        Label(info_frame, text=info_text,
              font=("Arial", 10), bg=self.colors['bg'], fg=self.colors['text'],
              justify=tk.LEFT).pack()

        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_frame = Frame(canvas, bg=self.colors['bg'])
        nav_frame.place(relx=0.5, rely=0.8, anchor=tk.CENTER)

        self.create_button(nav_frame, "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", self.main_menu,
                           width=20, height=2).pack(pady=10)

    def change_volume(self, value):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –∑–≤—É–∫–∞"""
        volume = int(value) / 100.0
        sound_manager.set_volume(volume)

    def start_game(self):
        self.game_state = GameState()
        self.show_question()

    def show_question(self):
        self.clear_window()

        main_frame = Frame(self.root, bg=self.colors['bg'])
        main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)

        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç—ã
        left_frame = Frame(main_frame, bg=self.colors['bg'])
        left_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

        # –ù–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞
        question_num = Label(left_frame,
                             text=f"–í–æ–ø—Ä–æ—Å {self.game_state.current_question_index + 1}",
                             font=("Arial", 16, "bold"),
                             bg=self.colors['bg'], fg=self.colors['text'])
        question_num.pack(pady=(0, 10))

        # –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
        question = self.game_state.get_current_question()
        question_text = Label(left_frame, text=question.text,
                              font=("Arial", 18), wraplength=500,
                              bg=self.colors['bg'], fg=self.colors['text'],
                              justify=tk.CENTER)
        question_text.pack(pady=20)

        # –ö–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
        self.answer_buttons = []
        for i, option in enumerate(question.options):
            btn = self.create_custom_font_button(left_frame, f"{chr(65 + i)}. {option}",
                                                 lambda i=i: self.check_answer(i),
                                                 width=50, height=2, wraplength=450,
                                                 font=("Arial", 11))
            btn.pack(pady=8)
            self.answer_buttons.append(btn)

        # –ü–æ–¥—Å–∫–∞–∑–∫–∏
        hints_frame = Frame(left_frame, bg=self.colors['bg'])
        hints_frame.pack(pady=20)

        self.hint_50_50_btn = self.create_button(hints_frame, "50/50", self.use_50_50,
                                                 width=12, state=tk.NORMAL if not self.game_state.used_hints[
                '50_50'] else tk.DISABLED)
        self.hint_50_50_btn.pack(side=tk.LEFT, padx=5)

        self.hint_call_btn = self.create_button(hints_frame, "üìû –î—Ä—É–≥", self.use_call_friend,
                                                width=12, state=tk.NORMAL if not self.game_state.used_hints[
                'call_friend'] else tk.DISABLED)
        self.hint_call_btn.pack(side=tk.LEFT, padx=5)

        self.hint_audience_btn = self.create_button(hints_frame, "üë• –ó–∞–ª", self.use_audience_help,
                                                    width=12, state=tk.NORMAL if not self.game_state.used_hints[
                'audience_help'] else tk.DISABLED)
        self.hint_audience_btn.pack(side=tk.LEFT, padx=5)

        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - —à–∫–∞–ª–∞ –≤—ã–∏–≥—Ä—ã—à–µ–π
        prize_frame = Frame(main_frame, bg=self.colors['prize_bg'], width=250)
        prize_frame.pack(side=tk.RIGHT, fill=tk.Y, padx=(20, 0))
        prize_frame.pack_propagate(False)

        Label(prize_frame, text="üèÜ –®–∫–∞–ª–∞ –≤—ã–∏–≥—Ä—ã—à–µ–π",
              font=("Arial", 16, "bold"), bg=self.colors['prize_bg'],
              fg=self.colors['text']).pack(pady=20)

        self.prize_labels = []
        prizes = self.game_state.prize_levels[::-1]

        for i, prize in enumerate(prizes):
            bg_color = self.colors['prize_bg']
            fg_color = self.colors['text']

            # –¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
            if len(prizes) - i - 1 == self.game_state.current_question_index:
                bg_color = self.colors['current_prize']
                fg_color = '#2c3e50'
            # –ù–µ—Å–≥–æ—Ä–∞–µ–º—ã–µ —Å—É–º–º—ã
            elif len(prizes) - i - 1 in self.game_state.safe_havens:
                bg_color = self.colors['secondary']
                fg_color = '#2c3e50'
            # –ü—Ä–æ–π–¥–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
            elif len(prizes) - i - 1 < self.game_state.current_question_index:
                bg_color = self.colors['primary']

            label = Label(prize_frame, text=f"{prize:,} ‚ÇΩ",
                          bg=bg_color, fg=fg_color,
                          font=("Arial", 12, "bold" if bg_color != self.colors['prize_bg'] else "normal"),
                          width=15, relief=tk.RAISED, bd=2)
            label.pack(pady=2)
            self.prize_labels.append(label)

    def check_answer(self, answer_index):
        # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        sound_manager.play_final_answer()

        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—Ç–≤–µ—Ç–∞
        self.root.update()
        self.root.after(800)  # –£–º–µ–Ω—å—à–∏–ª–∏ –ø–∞—É–∑—É –¥–æ 0.8 —Å–µ–∫

        is_correct, message = self.game_state.check_answer(answer_index)

        if is_correct:
            # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∑–µ–ª–µ–Ω—ã–º
            self.answer_buttons[answer_index].config(bg=self.colors['secondary'])
            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            self.root.after(500, sound_manager.play_correct)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–≤—É–∫–æ–º
            self.root.update()

            if self.game_state.game_over:
                # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –ø–æ–±–µ–¥—ã —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
                self.root.after(1000, lambda: self.show_victory(message))
            else:
                self.root.after(1500, lambda: self.show_next_question(message))
        else:
            # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∫—Ä–∞—Å–Ω—ã–º
            self.answer_buttons[answer_index].config(bg=self.colors['accent'])
            # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∑–µ–ª–µ–Ω—ã–º
            correct_index = self.game_state.get_current_question().correct_index
            self.answer_buttons[correct_index].config(bg=self.colors['secondary'])
            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            self.root.after(500, sound_manager.play_wrong)

            self.root.update()
            self.root.after(2000, lambda: self.show_game_over(message))

    def show_next_question(self, message):
        messagebox.showinfo("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!", message)
        self.show_question()

    def show_game_over(self, message):
        messagebox.showerror("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!", message)
        self.main_menu()

    def show_victory(self, message):
        self.clear_window()

        canvas = Canvas(self.root, bg=self.colors['bg'], highlightthickness=0)
        canvas.pack(fill=tk.BOTH, expand=True)

        Label(canvas, text="üéâ –ü–û–ë–ï–î–ê! üéâ",
              font=("Arial", 32, "bold"), bg=self.colors['bg'],
              fg=self.colors['secondary']).place(relx=0.5, rely=0.3, anchor=tk.CENTER)

        Label(canvas, text=message,
              font=("Arial", 18), bg=self.colors['bg'],
              fg=self.colors['text']).place(relx=0.5, rely=0.4, anchor=tk.CENTER)

        button_frame = Frame(canvas, bg=self.colors['bg'])
        button_frame.place(relx=0.5, rely=0.6, anchor=tk.CENTER)

        self.create_button(button_frame, "üîÑ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", self.start_game,
                           width=20, height=2).pack(pady=10)
        self.create_button(button_frame, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", self.main_menu,
                           width=20, height=2).pack(pady=10)

    def use_50_50(self):
        remove_options = self.game_state.use_hint_50_50()
        if remove_options is None:
            messagebox.showwarning("‚ö†Ô∏è", "–ü–æ–¥—Å–∫–∞–∑–∫–∞ 50/50 —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞!")
            return

        # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –ø–æ–¥—Å–∫–∞–∑–∫–∏
        sound_manager.play_hint()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏
        self.hint_50_50_btn.config(state=tk.DISABLED, bg=self.colors['disabled'])

        for index in remove_options:
            self.answer_buttons[index].config(state=tk.DISABLED, bg=self.colors['disabled'])

    def use_call_friend(self):
        suggested_answer = self.game_state.use_hint_call_friend()
        if suggested_answer is None:
            messagebox.showwarning("‚ö†Ô∏è", "–ü–æ–¥—Å–∫–∞–∑–∫–∞ '–ó–≤–æ–Ω–æ–∫ –¥—Ä—É–≥—É' —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞!")
            return

        # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –ø–æ–¥—Å–∫–∞–∑–∫–∏
        sound_manager.play_hint()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏
        self.hint_call_btn.config(state=tk.DISABLED, bg=self.colors['disabled'])

        question = self.game_state.get_current_question()
        friend_answers = [
            f"–î—Ä—É–≥ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —ç—Ç–æ –≤–∞—Ä–∏–∞–Ω—Ç {chr(65 + suggested_answer)}!",
            f"–î—Ä—É–≥ –≥–æ–≤–æ—Ä–∏—Ç: '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ {chr(65 + suggested_answer)}!'",
            f"–î—Ä—É–≥ —Å–æ–º–Ω–µ–≤–∞–µ—Ç—Å—è, –Ω–æ —Å–∫–ª–æ–Ω—è–µ—Ç—Å—è –∫ –≤–∞—Ä–∏–∞–Ω—Ç—É {chr(65 + suggested_answer)}.",
            f"–î—Ä—É–≥ –¥—É–º–∞–µ—Ç, —á—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - {chr(65 + suggested_answer)}."
        ]

        messagebox.showinfo("üìû –ó–≤–æ–Ω–æ–∫ –¥—Ä—É–≥—É", random.choice(friend_answers))

    def use_audience_help(self):
        percentages = self.game_state.use_hint_audience_help()
        if percentages is None:
            messagebox.showwarning("‚ö†Ô∏è", "–ü–æ–¥—Å–∫–∞–∑–∫–∞ '–ü–æ–º–æ—â—å –∑–∞–ª–∞' —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞!")
            return

        # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –ø–æ–¥—Å–∫–∞–∑–∫–∏
        sound_manager.play_hint()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏
        self.hint_audience_btn.config(state=tk.DISABLED, bg=self.colors['disabled'])

        help_window = tk.Toplevel(self.root)
        help_window.title("üë• –ü–æ–º–æ—â—å –∑–∞–ª–∞")
        help_window.geometry("500x400")
        help_window.configure(bg=self.colors['bg'])
        help_window.resizable(False, False)

        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ –ø–æ–º–æ—â–∏
        help_window.transient(self.root)
        help_window.grab_set()

        x = self.root.winfo_x() + (self.root.winfo_width() - 500) // 2
        y = self.root.winfo_y() + (self.root.winfo_height() - 400) // 2
        help_window.geometry(f"500x400+{x}+{y}")

        Label(help_window, text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞ –∑–∞–ª–∞:",
              font=("Arial", 16, "bold"), bg=self.colors['bg'],
              fg=self.colors['text']).pack(pady=20)

        question = self.game_state.get_current_question()
        for i, (option, percentage) in enumerate(zip(question.options, percentages)):
            frame = Frame(help_window, bg=self.colors['bg'])
            frame.pack(fill=tk.X, padx=30, pady=8)

            Label(frame, text=f"{chr(65 + i)}. {option}",
                  bg=self.colors['bg'], fg=self.colors['text'],
                  font=("Arial", 11), width=30, anchor="w").pack(side=tk.LEFT)

            # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞
            bar_canvas = Canvas(frame, width=200, height=25, bg=self.colors['prize_bg'], highlightthickness=0)
            bar_canvas.pack(side=tk.RIGHT, padx=10)

            bar_width = min(percentage * 2, 200)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É
            bar_canvas.create_rectangle(0, 0, bar_width, 25, fill=self.colors['primary'], outline="")
            bar_canvas.create_text(bar_width + 20, 12, text=f"{percentage}%",
                                   fill=self.colors['text'], font=("Arial", 10, "bold"))

    def clear_window(self):
        for widget in self.root.winfo_children():
            widget.destroy()